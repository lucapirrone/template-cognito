Resources:
  # The federated identity for our user pool to auth with
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      # Generate a name based on the stage
      IdentityPoolName: ${self:service.name}-${self:provider.stage}-identity-pool
      # Don't allow unathenticated users
      AllowUnauthenticatedIdentities: false
      # Link to our User Pool
      CognitoIdentityProviders:
        - ClientId:
            Ref: CognitoUserPoolAndroidClient
          ProviderName:
            Fn::GetAtt: [ "CognitoUserPoolAppUserPool", "ProviderName" ]
        - ClientId:
            Ref: CognitoUserPoolIOSClient
          ProviderName:
            Fn::GetAtt: [ "CognitoUserPoolAppUserPool", "ProviderName" ]
        - ClientId:
            Ref: CognitoUserPoolBrowserClient
          ProviderName:
            Fn::GetAtt: [ "CognitoUserPoolAppUserPool", "ProviderName" ]
      SupportedLoginProviders:
        Google: GOOGLE_CLIENT_ID #TODO
        Facebook: FACEBOOK_CLIENT_ID #TODO
  UserPoolIdentityProviderFacebook:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref CognitoUserPoolAppUserPool
      ProviderName: "Facebook"
      ProviderDetails:
        client_id: FACEBOOK_CLIENT_ID #TODO
        client_secret: FACEBOOK_CLIENT_SECRET #TODO
        authorize_scopes: "public_profile,email"
      ProviderType: "Facebook"
      AttributeMapping:
        email: "email"
  UserPoolIdentityProviderGoogle:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref CognitoUserPoolAppUserPool
      ProviderName: "Google"
      ProviderDetails:
        client_id: GOOGLE_CLIENT_ID #TODO
        client_secret: GOOGLE_CLIENT_SECRET #TODO
        authorize_scopes: "profile email openid"
      ProviderType: "Google"
      AttributeMapping:
        email: "email"
  # IAM roles
  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt: [CognitoAuthRole, Arn]

  # IAM role used for authenticated users
  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: CognitoIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: 'CognitoAuthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'

              # Allow users to invoke our API
              - Effect: 'Allow'
                Action:
                  - 'execute-api:Invoke'
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:execute-api:'
                      - Ref: AWS::Region
                      - ':'
                      - Ref: AWS::AccountId
                      - ':'
                      - 'Fn::ImportValue': ${self:provider.stage}-ApiGatewayArn
                      - '/*'
# Print out the Id of the Identity Pool that is created
Outputs:
  IdentityPoolId:
    Value:
      Ref: CognitoIdentityPool
