Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy = exports.getSpec = exports.respondWithError = exports.respond = exports.validate = exports.ajv = exports.spec = exports.ApiError = void 0;
const Ajv = require("ajv");
const stringify = require("json-stable-stringify");
const jsonpath = require("jsonpath");
const zlib = require("zlib");
const aws_1 = require("./aws");
const env_1 = require("./env");
const log_1 = require("./log");
;
;
class ApiError {
    constructor(message = 'Internal server error', errors, code = 500, name = undefined) {
        this.message = message;
        this.errors = errors;
        this.name = name;
        this.code = code;
    }
    static toString(err) {
        return stringify({
            message: err.message,
            errors: err.errors,
            code: err.code,
            name: err.name,
            stack: err.stack,
        });
    }
}
exports.ApiError = ApiError;
;
exports.spec = () => require('./swagger');
exports.ajv = Ajv({
    allErrors: true,
    coerceTypes: true,
    removeAdditional: true,
    useDefaults: true,
});
exports.validate = (request, method, resource) => {
    return Promise.resolve(exports.spec())
        .then(spec => {
        exports.ajv.compile(Object.assign({ $id: 'spec' }, spec));
        return spec.paths[resource][method.toLowerCase()].parameters;
    })
        .then(parameters => parameters.map((parameter) => validateParameter(request, parameter.$ref)))
        .then(collectErrors);
};
const validateParameter = (request, modelRef) => {
    const modelPath = modelRef.replace(/\//g, '.').substring(2);
    const model = jsonpath.value(exports.spec(), modelPath);
    const schemaRef = `spec${modelRef}${model.in === 'body' ? '/schema' : ''}`;
    let value = getRequestValue(request, model);
    if (value == null) {
        if (model.required) {
            if (model.in === 'body') {
                value = {};
            }
        }
        else if (model.default !== undefined) {
            return setDefaultValue(request, model);
        }
        else {
            return null;
        }
    }
    if (exports.ajv.validate(schemaRef, value)) {
        if (model.in === 'body') {
            request.body = value;
        }
        return null;
    }
    else {
        return exports.ajv.errors.map(error => {
            const dataPath = model.in === 'body' ? error.dataPath : `.${model.name}`;
            return `${model.in}${dataPath} ${error.message}`;
        });
    }
};
const getHeaderValue = (request, headerName) => {
    const name = RegExp(`^${headerName}$`, 'i');
    const header = jsonpath.nodes(request, 'headers.*')
        .find(node => name.test(String(node.path[2])));
    return header == null ? header : header.value;
};
const getRequestValue = (request, model) => {
    switch (model.in) {
        case 'path':
            return jsonpath.value(request, `pathParameters.${model.name}`);
        case 'query':
            return jsonpath.value(request, `queryStringParameters.${model.name}`);
        case 'header':
            return getHeaderValue(request, model.name);
        case 'body':
            return getBodyValue(request);
        default:
            throw new ApiError(`${model.in} parameters are not supported`);
    }
};
const getBodyValue = (request) => {
    const errParse = new ApiError('Invalid request', ['body could not be parsed'], 400);
    let body = jsonpath.value(request, 'body');
    if (typeof body === 'string') {
        if (jsonpath.value(request, 'isBase64Encoded') === true) {
            body = Buffer.from(body, 'base64');
        }
        try {
            return JSON.parse(body);
        }
        catch (err) {
            log_1.log.error(err.message);
            throw errParse;
        }
    }
    else if (body == null) {
        return body;
    }
    else {
        log_1.log.error('typeof body === ' + typeof body);
        throw errParse;
    }
};
const setDefaultValue = (request, model) => {
    switch (model.in) {
        case 'query':
            request.queryStringParameters = request.queryStringParameters || {};
            request.queryStringParameters[model.name] = model.default;
            break;
        case 'header':
            request.headers = request.headers || {};
            request.headers[model.name] = model.default;
            break;
    }
};
const collectErrors = (errs) => {
    const errors = [].concat.apply([], errs)
        .filter((error) => !!error);
    if (errors.length) {
        throw new ApiError('Invalid request', errors, 400);
    }
};
exports.respond = (callback, request, body, statusCode = 200, headers) => {
    const responseBody = body == null ? body : stringify(body, { space: 2 });
    const respondWith = (err, body, encodingMethod) => {
        if (err)
            return callback(err);
        const response = {
            statusCode,
            headers: Object.assign({
                'Access-Control-Allow-Origin': `https://${process.env[env_1.envNames.webDomain]}`,
                'Vary': 'Accept-Encoding',
            }, headers),
            body,
        };
        if (encodingMethod) {
            response.headers['Content-Encoding'] = encodingMethod;
            response.isBase64Encoded = true;
        }
        callback(null, response);
    };
    if (request && request.headers) {
        compress(respondWith, responseBody, getHeaderValue(request, 'Accept-Encoding'));
    }
    else {
        respondWith(null, responseBody);
    }
};
exports.respondWithError = (callback, request, err) => {
    if (err.code == null || err.code === 500 || isNaN(Number(err.code))) {
        log_1.log.error(ApiError.toString(err));
        err = new ApiError();
    }
    const body = { message: err.message, errors: err.errors };
    !body.errors && delete body.errors;
    exports.respond(callback, request, body, Number(err.code));
};
const compress = (callback, body, encodings) => {
    if (body == null) {
        callback(null, body);
    }
    else if (/(deflate|\*)/.test(encodings)) {
        zlib.deflate(body, (err, bodyCompressed) => {
            callback(err, err ? null : bodyCompressed.toString('base64'), 'deflate');
        });
    }
    else if (/gzip/.test(encodings)) {
        zlib.gzip(Buffer.from(body), (err, bodyCompressed) => {
            callback(err, err ? null : bodyCompressed.toString('base64'), 'gzip');
        });
    }
    else {
        callback(null, body);
    }
};
exports.getSpec = (request, context, callback) => {
    exports.validate(request, 'GET', '/')
        .then(() => exports.respond(callback, request, exports.spec()))
        .catch(err => exports.respondWithError(callback, request, err));
};
exports.deploy = (apiId, context, callback) => {
    aws_1.apiGateway.createDeployment({
        restApiId: apiId,
    }).promise()
        .then(data => callback(null, data.id))
        .catch(callback);
};
//# sourceMappingURL=data:application/json;base64,